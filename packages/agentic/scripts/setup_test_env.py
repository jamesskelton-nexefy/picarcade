#!/usr/bin/env python3
"""
Test Environment Setup Script for Pic Arcade Real-World Tests

This script helps configure the environment for running real-world integration tests
with actual API calls to OpenAI, Replicate, and Perplexity.
"""

import os
import sys
from pathlib import Path
from typing import Dict, List, Optional


class TestEnvironmentSetup:
    """Setup test environment for real-world API testing."""
    
    def __init__(self):
        self.required_keys = {
            "REPLICATE_API_TOKEN": {
                "description": "Replicate API token for Flux 1.1 Pro Ultra image generation",
                "url": "https://replicate.com/account/api-tokens",
                "format": "r8_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
                "required": True
            },
            "OPENAI_API_KEY": {
                "description": "OpenAI API key for GPT-4o prompt processing",
                "url": "https://platform.openai.com/api-keys",
                "format": "sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
                "required": True
            },
            "PERPLEXITY_API_KEY": {
                "description": "Perplexity API key for search functionality (optional)",
                "url": "https://www.perplexity.ai/settings/api",
                "format": "pplx-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
                "required": False
            },
            "BING_SEARCH_API_KEY": {
                "description": "Bing Search API key for reference retrieval (optional)",
                "url": "https://azure.microsoft.com/en-us/services/cognitive-services/search/",
                "format": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
                "required": False
            }
        }
        
        self.env_file = Path(".env")
        self.test_commands = [
            ("Quick Test", "npm run test:quick", "Fast validation test (2-3 tests)"),
            ("Flux Tools", "npm run test:flux", "Test all Flux image editing tools"),
            ("Tool-First Integration", "npm run test:tool-first", "Test complete tool-first workflow"),
            ("Real-World Demo", "npm run test:demo", "Full professional workflow demo"),
            ("Performance Tests", "npm run test:performance", "Performance benchmarks"),
            ("All Real-World Tests", "npm run test:real-world", "Complete real-world test suite")
        ]
    
    def check_current_environment(self) -> Dict[str, Optional[str]]:
        """Check which API keys are currently configured."""
        current_keys = {}
        
        for key in self.required_keys:
            value = os.getenv(key)
            current_keys[key] = value if value else None
        
        return current_keys
    
    def validate_api_key_format(self, key: str, value: str) -> bool:
        """Validate API key format."""
        if not value or len(value.strip()) < 10:
            return False
        
        key_formats = {
            "REPLICATE_API_TOKEN": lambda v: v.startswith("r8_") and len(v) > 30,
            "OPENAI_API_KEY": lambda v: v.startswith("sk-") and len(v) > 40,
            "PERPLEXITY_API_KEY": lambda v: v.startswith("pplx-") and len(v) > 35,
            "BING_SEARCH_API_KEY": lambda v: len(v) == 32
        }
        
        validator = key_formats.get(key)
        return validator(value) if validator else True
    
    def create_env_file(self, api_keys: Dict[str, str]) -> None:
        """Create or update .env file with API keys."""
        env_content = []
        
        # Read existing .env if it exists
        existing_vars = {}
        if self.env_file.exists():
            with open(self.env_file, 'r') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        existing_vars[key.strip()] = value.strip()
        
        # Update with new keys
        all_vars = {**existing_vars, **api_keys}
        
        # Write updated .env
        env_content = [
            "# Pic Arcade Real-World Test Environment",
            "# Generated by setup_test_env.py",
            ""
        ]
        
        # Group by service
        replicate_keys = [k for k in all_vars.keys() if "REPLICATE" in k]
        openai_keys = [k for k in all_vars.keys() if "OPENAI" in k]
        perplexity_keys = [k for k in all_vars.keys() if "PERPLEXITY" in k]
        bing_keys = [k for k in all_vars.keys() if "BING" in k]
        other_keys = [k for k in all_vars.keys() if not any(service in k for service in ["REPLICATE", "OPENAI", "PERPLEXITY", "BING"])]
        
        if replicate_keys:
            env_content.append("# Replicate API (Flux Image Generation)")
            for key in replicate_keys:
                env_content.append(f"{key}={all_vars[key]}")
            env_content.append("")
        
        if openai_keys:
            env_content.append("# OpenAI API (GPT-4o)")
            for key in openai_keys:
                env_content.append(f"{key}={all_vars[key]}")
            env_content.append("")
        
        if perplexity_keys:
            env_content.append("# Perplexity API (Search)")
            for key in perplexity_keys:
                env_content.append(f"{key}={all_vars[key]}")
            env_content.append("")
        
        if bing_keys:
            env_content.append("# Bing Search API")
            for key in bing_keys:
                env_content.append(f"{key}={all_vars[key]}")
            env_content.append("")
        
        if other_keys:
            env_content.append("# Other Configuration")
            for key in other_keys:
                env_content.append(f"{key}={all_vars[key]}")
        
        with open(self.env_file, 'w') as f:
            f.write('\n'.join(env_content))
        
        print(f"✅ Environment file updated: {self.env_file.absolute()}")
    
    def interactive_setup(self) -> None:
        """Interactive setup process."""
        print("🚀 PIC ARCADE REAL-WORLD TEST ENVIRONMENT SETUP")
        print("=" * 60)
        print("This script will help you configure API keys for real-world testing.")
        print("Real-world tests use actual images and API calls for comprehensive validation.\n")
        
        # Check current environment
        current_keys = self.check_current_environment()
        
        print("📋 CURRENT ENVIRONMENT STATUS:")
        print("-" * 30)
        for key, info in self.required_keys.items():
            current_value = current_keys.get(key)
            if current_value:
                # Mask the key for security
                masked = current_value[:8] + "..." + current_value[-4:] if len(current_value) > 12 else "***"
                status = "✅ Configured" if self.validate_api_key_format(key, current_value) else "⚠️  Invalid format"
                required_text = " (REQUIRED)" if info["required"] else " (optional)"
                print(f"{status} {key}: {masked}{required_text}")
            else:
                required_text = " (REQUIRED)" if info["required"] else " (optional)"
                print(f"❌ Missing  {key}: Not configured{required_text}")
        
        print("\n" + "=" * 60)
        
        # Check if required keys are present
        missing_required = [
            key for key, info in self.required_keys.items() 
            if info["required"] and not current_keys.get(key)
        ]
        
        invalid_required = [
            key for key, info in self.required_keys.items()
            if info["required"] and current_keys.get(key) and not self.validate_api_key_format(key, current_keys[key])
        ]
        
        if not missing_required and not invalid_required:
            print("🎉 All required API keys are configured and valid!")
            print("\nYou can now run real-world tests:")
            for name, command, desc in self.test_commands:
                print(f"   {command:<30} # {desc}")
            return
        
        if missing_required or invalid_required:
            print(f"⚠️  Setup required: {len(missing_required + invalid_required)} keys need configuration\n")
            
            new_keys = {}
            
            for key in missing_required + invalid_required:
                info = self.required_keys[key]
                
                print(f"🔑 CONFIGURE {key}")
                print(f"   Purpose: {info['description']}")
                print(f"   Get key: {info['url']}")
                print(f"   Format:  {info['format']}")
                
                while True:
                    value = input(f"   Enter {key}: ").strip()
                    
                    if not value and not info["required"]:
                        print("   ⏭️  Skipped (optional)")
                        break
                    
                    if not value:
                        print("   ❌ This key is required. Please enter a value.")
                        continue
                    
                    if self.validate_api_key_format(key, value):
                        new_keys[key] = value
                        print("   ✅ Valid format")
                        break
                    else:
                        print(f"   ❌ Invalid format. Expected: {info['format']}")
                
                print()
            
            if new_keys:
                self.create_env_file(new_keys)
                print("\n🎊 Setup complete! Your API keys have been saved to .env")
                
                print("\n📖 NEXT STEPS:")
                print("1. Restart your terminal to load new environment variables")
                print("2. Run a quick test to validate setup:")
                print("   npm run test:quick")
                print("\n3. Run comprehensive tests:")
                for name, command, desc in self.test_commands[:3]:  # Show first 3
                    print(f"   {command:<30} # {desc}")
                
                print("\n⚠️  IMPORTANT NOTES:")
                print("• Real-world tests make actual API calls and may incur costs")
                print("• Replicate Flux operations typically cost $0.003-0.01 per image")
                print("• OpenAI GPT-4o calls cost ~$0.01-0.03 per request")
                print("• Tests include rate limiting to avoid overwhelming APIs")
                print("• Keep your API keys secure and never commit them to version control")
    
    def validate_setup(self) -> bool:
        """Validate that the environment is properly set up."""
        current_keys = self.check_current_environment()
        
        required_keys = [
            key for key, info in self.required_keys.items() 
            if info["required"]
        ]
        
        for key in required_keys:
            value = current_keys.get(key)
            if not value or not self.validate_api_key_format(key, value):
                return False
        
        return True
    
    def show_test_commands(self) -> None:
        """Show available test commands."""
        print("\n🧪 AVAILABLE TEST COMMANDS:")
        print("=" * 50)
        
        for name, command, description in self.test_commands:
            print(f"\n{name}:")
            print(f"  {command}")
            print(f"  → {description}")


def main():
    """Main setup function."""
    setup = TestEnvironmentSetup()
    
    # Check if we're just validating
    if len(sys.argv) > 1 and sys.argv[1] == "--validate":
        if setup.validate_setup():
            print("✅ Environment is properly configured for real-world tests")
            sys.exit(0)
        else:
            print("❌ Environment is not properly configured")
            print("Run: python scripts/setup_test_env.py")
            sys.exit(1)
    
    # Check if we're showing commands
    if len(sys.argv) > 1 and sys.argv[1] == "--commands":
        setup.show_test_commands()
        return
    
    # Run interactive setup
    setup.interactive_setup()


if __name__ == "__main__":
    main() 